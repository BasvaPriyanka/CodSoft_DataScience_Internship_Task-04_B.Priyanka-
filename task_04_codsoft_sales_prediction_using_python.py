# -*- coding: utf-8 -*-
"""Task-04_CodSoft_Sales_Prediction_Using_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NX21PddAZL-tb0OPvzewMZJMxFJrUccQ

**Task-04**: SALES PREDICTION USING PYTHON

**Author**: B. Priyanka

**Batch**: October- November

**Domain**: Data Science

**Aim**: To Build a model which predicts sales based on the money spent on different platforms for marketing.

***Analysing the data***
"""

import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

advertising = pd.DataFrame(pd.read_csv("/content/B. Priyanka advertising.csv"))
advertising.head()

"""Insprection of the Data"""

advertising.shape

advertising.info()

advertising.describe()

"""***Cleaning the Data***"""

advertising.isnull().sum()*100/advertising.shape[0]

fig, axs = plt.subplots(3, figsize = (5,5))
plt1 = sns.boxplot(advertising['TV'], ax = axs[0])
plt2 = sns.boxplot(advertising['Newspaper'], ax = axs[1])
plt3 = sns.boxplot(advertising['Radio'], ax = axs[2])
plt.tight_layout()

"""***Data Analysis Exploring***"""

sns.boxplot(advertising['Sales'])
plt.show()

sns.pairplot(advertising, x_vars=['TV', 'Newspaper', 'Radio'], y_vars='Sales', height=4, aspect=1, kind='scatter')
plt.show()

sns.heatmap(advertising.corr(), cmap="YlGnBu", annot = True)
plt.show()

"""***Model Building***"""

X = advertising['TV']
y = advertising['Sales']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, test_size = 0.3, random_state = 100)

X_train.head()

y_train.head()

"""Construction of linear model"""

import statsmodels.api as sm

X_train_sm = sm.add_constant(X_train)
lr = sm.OLS(y_train, X_train_sm).fit()

lr.params

print(lr.summary())

"""***Evaluation of the model***"""

y_train_pred = lr.predict(X_train_sm)
res = (y_train - y_train_pred)

fig = plt.figure()
sns.distplot(res, bins = 15)
fig.suptitle('Error Terms', fontsize = 15)
plt.xlabel('y_train - y_train_pred', fontsize = 15)
plt.show()

plt.scatter(X_train,res)
plt.show()

"""Test set Predictions"""

X_test_sm = sm.add_constant(X_test)
y_pred = lr.predict(X_test_sm)

y_pred.head()

from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

np.sqrt(mean_squared_error(y_test, y_pred))

r_squared = r2_score(y_test, y_pred)
r_squared

"""Visualizing"""

plt.scatter(X_test, y_test)
plt.plot(X_test, 6.948 + 0.054 * X_test, 'r')
plt.show()